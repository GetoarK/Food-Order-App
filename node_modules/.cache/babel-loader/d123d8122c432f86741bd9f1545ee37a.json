{"ast":null,"code":"var _jsxFileName = \"/Users/getoar/Documents/Frontendutbildning/React - The Complete Guide/Food-Order-App/src/Components/Cart/Checkout.js\",\n    _s = $RefreshSig$();\n\nimport classes from \"./Checkout.module.css\";\nimport { useRef, useState } from \"react\"; // Helper functions for validation\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isEmpty = value => value.trim() === \"\";\n\nconst isFiveChars = value => value.trim().length === 5;\n\nconst Checkout = props => {\n  _s();\n\n  const [formInputsValidity, setFormInputsValidity] = useState({\n    name: true,\n    street: true,\n    city: true,\n    postalCode: true\n  });\n  const nameInputRef = useRef();\n  const streetInputRef = useRef();\n  const cityInputRef = useRef();\n  const postalInputRef = useRef();\n\n  const confirmOrderHandler = event => {\n    event.preventDefault();\n    const enteredName = nameInputRef.current.value;\n    const enteredStreet = streetInputRef.current.value;\n    const enteredCity = cityInputRef.current.value;\n    const enteredPostal = postalInputRef.current.value;\n    const enteredNameIsValid = !isEmpty(enteredName);\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\n    const enteredCityIsValid = !isEmpty(enteredCity);\n    const enteredPostalIsValid = isFiveChars(enteredPostal);\n    setFormInputsValidity({\n      name: enteredNameIsValid,\n      street: enteredStreetIsValid,\n      city: enteredCityIsValid,\n      postalCode: enteredPostalIsValid\n    });\n    const formIsValid = enteredNameIsValid && enteredStreetIsValid && enteredPostalIsValid && enteredCityIsValid;\n\n    if (!formIsValid) {\n      return;\n    }\n\n    if (formIsValid) {// Submit Data\n    }\n  }; // Dynamiska klasser som assignas till variabler för att sedan ha i className för mer clean code\n\n\n  const nameControlClasses = `${classes.control} ${formInputsValidity.name ? \"\" : classes.invalid}`;\n  const streetControlClasses = `${classes.control} ${formInputsValidity.street ? \"\" : classes.invalid}`;\n  const postalControlClasses = `${classes.control} ${formInputsValidity.postal ? \"\" : classes.invalid}`;\n  const cityControlClasses = `${classes.control} ${formInputsValidity.city ? \"\" : classes.invalid}`;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: confirmOrderHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: nameInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), !formInputsValidity.name && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Name is not valid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 38\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: streetControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        ref: streetInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), !formInputsValidity.street && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Street is not valid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 40\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: postalControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postal\",\n        children: \"Postal Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postal\",\n        ref: postalInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), !formInputsValidity.postalCode && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Postal code is not valid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 44\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cityControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"Your City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        ref: cityInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), !formInputsValidity.city && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"City is not valid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 38\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.submit,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"VuXr3LSUpud9xh3lFuf6+piwin8=\");\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["/Users/getoar/Documents/Frontendutbildning/React - The Complete Guide/Food-Order-App/src/Components/Cart/Checkout.js"],"names":["classes","useRef","useState","isEmpty","value","trim","isFiveChars","length","Checkout","props","formInputsValidity","setFormInputsValidity","name","street","city","postalCode","nameInputRef","streetInputRef","cityInputRef","postalInputRef","confirmOrderHandler","event","preventDefault","enteredName","current","enteredStreet","enteredCity","enteredPostal","enteredNameIsValid","enteredStreetIsValid","enteredCityIsValid","enteredPostalIsValid","formIsValid","nameControlClasses","control","invalid","streetControlClasses","postalControlClasses","postal","cityControlClasses","form","actions","onCancel","submit"],"mappings":"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","sourcesContent":["import classes from \"./Checkout.module.css\";\nimport { useRef, useState } from \"react\";\n\n// Helper functions for validation\nconst isEmpty = (value) => value.trim() === \"\";\nconst isFiveChars = (value) => value.trim().length === 5;\n\nconst Checkout = (props) => {\n  const [formInputsValidity, setFormInputsValidity] = useState({\n    name: true,\n    street: true,\n    city: true,\n    postalCode: true,\n  });\n\n  const nameInputRef = useRef();\n  const streetInputRef = useRef();\n  const cityInputRef = useRef();\n  const postalInputRef = useRef();\n\n  const confirmOrderHandler = (event) => {\n    event.preventDefault();\n\n    const enteredName = nameInputRef.current.value;\n    const enteredStreet = streetInputRef.current.value;\n    const enteredCity = cityInputRef.current.value;\n    const enteredPostal = postalInputRef.current.value;\n\n    const enteredNameIsValid = !isEmpty(enteredName);\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\n    const enteredCityIsValid = !isEmpty(enteredCity);\n    const enteredPostalIsValid = isFiveChars(enteredPostal);\n\n    setFormInputsValidity({\n      name: enteredNameIsValid,\n      street: enteredStreetIsValid,\n      city: enteredCityIsValid,\n      postalCode: enteredPostalIsValid,\n    });\n\n    const formIsValid =\n      enteredNameIsValid &&\n      enteredStreetIsValid &&\n      enteredPostalIsValid &&\n      enteredCityIsValid;\n\n    if (!formIsValid) {\n      return;\n    }\n\n    if (formIsValid) {\n      // Submit Data\n    }\n  };\n\n  // Dynamiska klasser som assignas till variabler för att sedan ha i className för mer clean code\n  const nameControlClasses = `${classes.control} ${\n    formInputsValidity.name ? \"\" : classes.invalid\n  }`;\n  const streetControlClasses = `${classes.control} ${\n    formInputsValidity.street ? \"\" : classes.invalid\n  }`;\n  const postalControlClasses = `${classes.control} ${\n    formInputsValidity.postal ? \"\" : classes.invalid\n  }`;\n  const cityControlClasses = `${classes.control} ${\n    formInputsValidity.city ? \"\" : classes.invalid\n  }`;\n\n  return (\n    <form className={classes.form} onSubmit={confirmOrderHandler}>\n      <div className={nameControlClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input type=\"text\" id=\"name\" ref={nameInputRef} />\n        {!formInputsValidity.name && <p>Name is not valid</p>}\n      </div>\n      <div className={streetControlClasses}>\n        <label htmlFor=\"street\">Street Name</label>\n        <input type=\"text\" id=\"street\" ref={streetInputRef} />\n        {!formInputsValidity.street && <p>Street is not valid</p>}\n      </div>\n      <div className={postalControlClasses}>\n        <label htmlFor=\"postal\">Postal Code</label>\n        <input type=\"text\" id=\"postal\" ref={postalInputRef} />\n        {!formInputsValidity.postalCode && <p>Postal code is not valid</p>}\n      </div>\n      <div className={cityControlClasses}>\n        <label htmlFor=\"city\">Your City</label>\n        <input type=\"text\" id=\"city\" ref={cityInputRef} />\n        {!formInputsValidity.city && <p>City is not valid</p>}\n      </div>\n      <div className={classes.actions}>\n        <button onClick={props.onCancel}>Cancel</button>\n        <button className={classes.submit}>Confirm</button>\n      </div>\n    </form>\n  );\n};\n\nexport default Checkout;\n"]},"metadata":{},"sourceType":"module"}