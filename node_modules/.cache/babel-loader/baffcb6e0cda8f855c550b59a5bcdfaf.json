{"ast":null,"code":"var _jsxFileName = \"/Users/getoar/Documents/Frontendutbildning/React - The Complete Guide/Food-Order-App/src/Components/Meals/AvailableMeals.js\",\n    _s = $RefreshSig$();\n\nimport classes from \"./AvailableMeals.module.css\";\nimport Card from \"../UI/Card\";\nimport MealItem from \"../Meals/MealItem/MealItem\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AvailableMeals = props => {\n  _s();\n\n  const [meals, setMeals] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetchMealsHandler = async () => {\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(\"https://reactmovies-http-post-default-rtdb.europe-west1.firebasedatabase.app/meals.json\");\n      console.log(response);\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      } // Eftersom firebase ger oss objekt vill vi göra om det till en array som vi sedan mapar upp.\n\n\n      const responseData = await response.json();\n      console.log(responseData); // Här gör vi transformationen\n\n      const loadedMeals = [];\n\n      for (const key in responseData) {\n        loadedMeals.push({\n          id: key,\n          name: responseData[key].name,\n          description: responseData[key].description,\n          price: responseData[key].price\n        });\n      }\n\n      setMeals(loadedMeals);\n      setIsLoading(false);\n    } catch (error) {}\n  };\n\n  useEffect(() => {\n    fetchMealsHandler();\n  }, []);\n  const mealsList = meals.map(meal => /*#__PURE__*/_jsxDEV(MealItem, {\n    id: meal.id,\n    name: meal.name,\n    description: meal.description,\n    price: meal.price\n  }, meal.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this));\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.mealIsLoading,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Page is loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.meals,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: [mealsList, isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AvailableMeals, \"Yl5rSD9SqyOxem0/e3YEJ1j/41I=\");\n\n_c = AvailableMeals;\nexport default AvailableMeals;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"sources":["/Users/getoar/Documents/Frontendutbildning/React - The Complete Guide/Food-Order-App/src/Components/Meals/AvailableMeals.js"],"names":["classes","Card","MealItem","useEffect","useState","AvailableMeals","props","meals","setMeals","isLoading","setIsLoading","fetchMealsHandler","response","fetch","console","log","ok","Error","responseData","json","loadedMeals","key","push","id","name","description","price","error","mealsList","map","meal","mealIsLoading"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,6BAApB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAAA;;AAChC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMO,iBAAiB,GAAG,YAAY;AACpCD,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAI;AACF,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAC1B,yFAD0B,CAA5B;AAIAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;;AAEA,UAAI,CAACA,QAAQ,CAACI,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD,OATC,CAWF;;;AACA,YAAMC,YAAY,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAA3B;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYG,YAAZ,EAbE,CAeF;;AACA,YAAME,WAAW,GAAG,EAApB;;AAEA,WAAK,MAAMC,GAAX,IAAkBH,YAAlB,EAAgC;AAC9BE,QAAAA,WAAW,CAACE,IAAZ,CAAiB;AACfC,UAAAA,EAAE,EAAEF,GADW;AAEfG,UAAAA,IAAI,EAAEN,YAAY,CAACG,GAAD,CAAZ,CAAkBG,IAFT;AAGfC,UAAAA,WAAW,EAAEP,YAAY,CAACG,GAAD,CAAZ,CAAkBI,WAHhB;AAIfC,UAAAA,KAAK,EAAER,YAAY,CAACG,GAAD,CAAZ,CAAkBK;AAJV,SAAjB;AAMD;;AACDlB,MAAAA,QAAQ,CAACY,WAAD,CAAR;AACAV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KA5BD,CA4BE,OAAOiB,KAAP,EAAc,CAAE;AACnB,GA/BD;;AAiCAxB,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT;AAIA,QAAMiB,SAAS,GAAGrB,KAAK,CAACsB,GAAN,CAAWC,IAAD,iBAC1B,QAAC,QAAD;AACE,IAAA,EAAE,EAAEA,IAAI,CAACP,EADX;AAGE,IAAA,IAAI,EAAEO,IAAI,CAACN,IAHb;AAIE,IAAA,WAAW,EAAEM,IAAI,CAACL,WAJpB;AAKE,IAAA,KAAK,EAAEK,IAAI,CAACJ;AALd,KAEOI,IAAI,CAACP,EAFZ;AAAA;AAAA;AAAA;AAAA,UADgB,CAAlB;;AAUA,MAAId,SAAJ,EAAe;AACb,wBACE;AAAS,MAAA,SAAS,EAAET,OAAO,CAAC+B,aAA5B;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,sBACE;AAAS,IAAA,SAAS,EAAE/B,OAAO,CAACO,KAA5B;AAAA,2BACE,QAAC,IAAD;AAAA,iBACGqB,SADH,EAEGnB,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAnED;;GAAMJ,c;;KAAAA,c;AAqEN,eAAeA,cAAf","sourcesContent":["import classes from \"./AvailableMeals.module.css\";\nimport Card from \"../UI/Card\";\nimport MealItem from \"../Meals/MealItem/MealItem\";\nimport { useEffect, useState } from \"react\";\n\nconst AvailableMeals = (props) => {\n  const [meals, setMeals] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetchMealsHandler = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\n        \"https://reactmovies-http-post-default-rtdb.europe-west1.firebasedatabase.app/meals.json\"\n      );\n\n      console.log(response);\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      // Eftersom firebase ger oss objekt vill vi göra om det till en array som vi sedan mapar upp.\n      const responseData = await response.json();\n      console.log(responseData);\n\n      // Här gör vi transformationen\n      const loadedMeals = [];\n\n      for (const key in responseData) {\n        loadedMeals.push({\n          id: key,\n          name: responseData[key].name,\n          description: responseData[key].description,\n          price: responseData[key].price,\n        });\n      }\n      setMeals(loadedMeals);\n      setIsLoading(false);\n    } catch (error) {}\n  };\n\n  useEffect(() => {\n    fetchMealsHandler();\n  }, []);\n\n  const mealsList = meals.map((meal) => (\n    <MealItem\n      id={meal.id}\n      key={meal.id}\n      name={meal.name}\n      description={meal.description}\n      price={meal.price}\n    />\n  ));\n\n  if (isLoading) {\n    return (\n      <section className={classes.mealIsLoading}>\n        <p>Page is loading</p>\n      </section>\n    );\n  }\n\n  return (\n    <section className={classes.meals}>\n      <Card>\n        {mealsList}\n        {isLoading && <p>Loading</p>}\n      </Card>\n    </section>\n  );\n};\n\nexport default AvailableMeals;\n"]},"metadata":{},"sourceType":"module"}