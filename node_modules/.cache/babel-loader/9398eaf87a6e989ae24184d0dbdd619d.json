{"ast":null,"code":"var _jsxFileName = \"/Users/getoar/Documents/Frontendutbildning/React - The Complete Guide/Food Order App (Sec 11)/src/Store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount; // För att hitta samma föremål i carten (enligt logiken i recudern kmr det aldrig bli mer än 1 unik)\n    // i listan som displayas i cart\n\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id); // Nu har vi \"plockat ut\" det item som är likadant utifrån hittat index tex action.item.id === Sushi\n\n    const existingCartItem = state.items[existingCartItemIndex]; // Skapa en ny tom array som ska ersätta den gamla arrayen (efter att vi slagit ihop)\n    // Om existingCartItem finns -> spreada ut alla nycklar men assigna amount till\n    // den gamla amount + det nya föremålets amount som läggs till för tillfället\n\n    if (existingCartItem) {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      }; // updatedItems blir en kopia av dåvarande arrayen\n\n      let updatedItems = [...state.items]; // itemet som är på det tidigare indexet = nya itemet med ihopslagna amounts\n\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } // Om inte det har funnits item med samma id, så lägg bara på itemet i state.items arrayen\n    else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === \"REMOVE\") {\n    const itemToRemove = state.items.id.find();\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  }; // Jag antar att denna är låst till formatet enligt contextfilen?\n\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/getoar/Documents/Frontendutbildning/React - The Complete Guide/Food Order App (Sec 11)/src/Store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItem","updatedItems","concat","itemToRemove","find","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AACzB,UAAMC,kBAAkB,GACtBH,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACG,IAAP,CAAYC,KAAZ,GAAoBJ,MAAM,CAACG,IAAP,CAAYE,MADtD,CADyB,CAIzB;AACA;;AACA,UAAMC,qBAAqB,GAAGP,KAAK,CAACH,KAAN,CAAYW,SAAZ,CAC3BJ,IAAD,IAAUA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACG,IAAP,CAAYK,EADN,CAA9B,CANyB,CAUzB;;AACA,UAAMC,gBAAgB,GAAGV,KAAK,CAACH,KAAN,CAAYU,qBAAZ,CAAzB,CAXyB,CAazB;AAEA;AACA;;AACA,QAAIG,gBAAJ,EAAsB;AACpB,YAAMC,WAAW,GAAG,EAClB,GAAGD,gBADe;AAElBJ,QAAAA,MAAM,EAAEI,gBAAgB,CAACJ,MAAjB,GAA0BL,MAAM,CAACG,IAAP,CAAYE;AAF5B,OAApB,CADoB,CAMpB;;AACA,UAAIM,YAAY,GAAG,CAAC,GAAGZ,KAAK,CAACH,KAAV,CAAnB,CAPoB,CASpB;;AACAe,MAAAA,YAAY,CAACL,qBAAD,CAAZ,GAAsCI,WAAtC;AACD,KAXD,CAaA;AAbA,SAcK;AACHC,MAAAA,YAAY,GAAGZ,KAAK,CAACH,KAAN,CAAYgB,MAAZ,CAAmBZ,MAAM,CAACG,IAA1B,CAAf;AACD;;AAED,WAAO;AACLP,MAAAA,KAAK,EAAEe,YADF;AAELd,MAAAA,WAAW,EAAEK;AAFR,KAAP;AAID;;AAED,MAAIF,MAAM,CAACC,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAMY,YAAY,GAAGd,KAAK,CAACH,KAAN,CAAYY,EAAZ,CAAeM,IAAf,EAArB;AACD;;AAED,SAAOnB,gBAAP;AACD,CA/CD;;AAiDA,MAAMoB,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCzB,UAAU,CAChDK,WADgD,EAEhDH,gBAFgD,CAAlD;;AAKA,QAAMwB,oBAAoB,GAAIhB,IAAD,IAAU;AACrCe,IAAAA,kBAAkB,CAAC;AACjBjB,MAAAA,IAAI,EAAE,KADW;AAEjBE,MAAAA,IAAI,EAAEA;AAFW,KAAD,CAAlB;AAID,GALD;;AAOA,QAAMiB,yBAAyB,GAAIZ,EAAD,IAAQ;AACxCU,IAAAA,kBAAkB,CAAC;AACjBjB,MAAAA,IAAI,EAAE,QADW;AAEjBO,MAAAA,EAAE,EAAEA;AAFa,KAAD,CAAlB;AAID,GALD,CAb8B,CAoB9B;;;AACA,QAAMa,WAAW,GAAG;AAClBzB,IAAAA,KAAK,EAAEqB,SAAS,CAACrB,KADC;AAElBC,IAAAA,WAAW,EAAEoB,SAAS,CAACpB,WAFL;AAGlByB,IAAAA,OAAO,EAAEH,oBAHS;AAIlBI,IAAAA,UAAU,EAAEH;AAJM,GAApB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACGL,KAAK,CAACQ;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAjCD;;GAAMT,Y;;KAAAA,Y;AAmCN,eAAeA,YAAf","sourcesContent":["import { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\n\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    const updatedTotalAmount =\n      state.totalAmount + action.item.price * action.item.amount;\n\n    // För att hitta samma föremål i carten (enligt logiken i recudern kmr det aldrig bli mer än 1 unik)\n    // i listan som displayas i cart\n    const existingCartItemIndex = state.items.findIndex(\n      (item) => item.id === action.item.id\n    );\n\n    // Nu har vi \"plockat ut\" det item som är likadant utifrån hittat index tex action.item.id === Sushi\n    const existingCartItem = state.items[existingCartItemIndex];\n\n    // Skapa en ny tom array som ska ersätta den gamla arrayen (efter att vi slagit ihop)\n\n    // Om existingCartItem finns -> spreada ut alla nycklar men assigna amount till\n    // den gamla amount + det nya föremålets amount som läggs till för tillfället\n    if (existingCartItem) {\n      const updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount,\n      };\n\n      // updatedItems blir en kopia av dåvarande arrayen\n      let updatedItems = [...state.items];\n\n      // itemet som är på det tidigare indexet = nya itemet med ihopslagna amounts\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n\n    // Om inte det har funnits item med samma id, så lägg bara på itemet i state.items arrayen\n    else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount,\n    };\n  }\n\n  if (action.type === \"REMOVE\") {\n    const itemToRemove = state.items.id.find();\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = (props) => {\n  const [cartState, dispatchCartAction] = useReducer(\n    cartReducer,\n    defaultCartState\n  );\n\n  const addItemToCartHandler = (item) => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item,\n    });\n  };\n\n  const removeItemFromCartHandler = (id) => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id,\n    });\n  };\n\n  // Jag antar att denna är låst till formatet enligt contextfilen?\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler,\n  };\n\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n"]},"metadata":{},"sourceType":"module"}